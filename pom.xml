<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.kuali.pom</groupId>
    <artifactId>kuali-common</artifactId>
    <version>2.1.54</version>
  </parent>
  <groupId>org.kuali.student</groupId>
  <artifactId>student</artifactId>
  <version>2.0.0-spring-db-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Kuali Student</name>
  <modules>
    <module>ks-core</module>
    <module>ks-lum</module>
    <module>ks-enroll</module>
    <module>ks-deployments</module>
  </modules>
  <scm>
    <connection>scm:svn:https://svn.kuali.org/repos/student/sandbox/spring-db-jc/aggregate/trunk</connection>
    <developerConnection>scm:svn:https://svn.kuali.org/repos/student/sandbox/spring-db-jc/aggregate/trunk</developerConnection>
    <url>https://svn.kuali.org/repos/student/sandbox/spring-db-jc/aggregate/trunk</url>
  </scm>
  <properties>
    <impex.version>2.0.1-SNAPSHOT</impex.version>
    <oracle.dba.username>SYS AS SYSDBA</oracle.dba.username>
    <oracle.dba.password>CHANGE_ON_INSTALL</oracle.dba.password>
    <mysql.dba.username>root</mysql.dba.username>
    <!-- NONE is a special value that gets explicitly converted to null, which is what the Spring code needs if there is no password for root -->
    <mysql.dba.password>NONE</mysql.dba.password>
    <oracle.version>11.2.0.2</oracle.version>
    <oracle.artifactId>ojdbc6_g</oracle.artifactId>
    <mysql.version>5.1.22</mysql.version>
    <kuali.rice.version>2.2.0</kuali.rice.version>
    <ks.core.version>2.0.0-spring-db-SNAPSHOT</ks.core.version>
    <ks.enroll.version>1.0.0-spring-db-SNAPSHOT</ks.enroll.version>
    <ks.lum.version>2.0.0-spring-db-SNAPSHOT</ks.lum.version>
    <ks.deployments.version>2.0.0-spring-db-SNAPSHOT</ks.deployments.version>

    <!-- default -->
    <plugin.spring.context.db>classpath:org/kuali/common/deploy/spring/db-developer-context.xml</plugin.spring.context.db>

    <!-- Spring context that creates META-INF files describing SQL resources -->
    <metainf.sql.context>classpath:org/kuali/common/util/metainf-sql-context.xml</metainf.sql.context>
    <metainf.resource.prefix>classpath:</metainf.resource.prefix>

    <!-- SQL resource locations -->
    <metainf.resource.base>META-INF/sql/${db.vendor}/${project.artifactId}</metainf.resource.base>
    <metainf.resource.schema>${metainf.resource.base}-schema.resources</metainf.resource.schema>
    <metainf.resource.data>${metainf.resource.base}-data.resources</metainf.resource.data>
    <metainf.resource.constraints>${metainf.resource.base}-constraints.resources</metainf.resource.constraints>
    <metainf.resource.other>${metainf.resource.base}-upgrades.resources</metainf.resource.other>

    <!-- Regex controlling which SQL files get included for each area -->
    <metainf.include.schema>**/initial-db/**/ks-*create-schema.sql</metainf.include.schema>
    <metainf.include.data>**/initial-db/**/data/*.sql</metainf.include.data>
    <metainf.include.constraints>**/initial-db/**/ks-*constraints.sql</metainf.include.constraints>
    <metainf.include.other>**/upgrades/**/*.sql</metainf.include.other>

    <!-- File system locations for the META-INF files -->
    <metainf.output.schema>${project.build.outputDirectory}/${metainf.resource.schema}</metainf.output.schema>
    <metainf.output.data>${project.build.outputDirectory}/${metainf.resource.data}</metainf.output.data>
    <metainf.output.constraints>${project.build.outputDirectory}/${metainf.resource.constraints}</metainf.output.constraints>
    <metainf.output.other>${project.build.outputDirectory}/${metainf.resource.other}</metainf.output.other>
  </properties>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.kuali.maven.plugins</groupId>
          <artifactId>spring-maven-plugin</artifactId>
          <dependencies>
            <dependency>
              <groupId>org.kuali.common</groupId>
              <artifactId>kuali-deploy</artifactId>
              <version>${kuali-deploy.version}</version>
            </dependency>
            <dependency>
              <groupId>org.kuali.common</groupId>
              <artifactId>kuali-jdbc</artifactId>
              <version>${kuali-jdbc.version}</version>
            </dependency>
            <dependency>
              <groupId>org.kuali.common</groupId>
              <artifactId>kuali-util</artifactId>
              <version>${kuali-util.version}</version>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
