<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Academic Calendar Edit and Save" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Virtual Users" elementType="Argument">
            <stringProp name="Argument.name">Virtual Users</stringProp>
            <stringProp name="Argument.value">${__P(VUSERS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__P(ENV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ramp Up" elementType="Argument">
            <stringProp name="Argument.name">Ramp Up</stringProp>
            <stringProp name="Argument.value">${__P(RAMP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Run" elementType="Argument">
            <stringProp name="Argument.name">Run</stringProp>
            <stringProp name="Argument.value">${__P(RUN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(ENV)}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Academic Calendar Edit and Save" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(RUN)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(VUSERS)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMP)}</stringProp>
        <longProp name="ThreadGroup.start_time">1401298363000</longProp>
        <longProp name="ThreadGroup.end_time">1401298363000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Request Login Page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/j_spring_security_check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/j_spring_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/login.jsp;jsessionid=C80140C1838BAE4EF134BA0A7B0DB1FE</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/launch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">start</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">ksFunctionalHomeView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/launch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/header/logo_kuali.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/header/logo_kuali.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/homepage/cm.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/homepage/cm.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/homepage/enrollment.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/homepage/enrollment.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/homepage/ks_maintenance.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/homepage/ks_maintenance.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.error</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/fonts/raleway/raleway-regular-webfont.woff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/fonts/raleway/raleway-regular-webfont.woff</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/themes/ksboot/stylesheets/ksboot.2.1.1-FR2-M1-build-777.min.css</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/fonts/lato/Lato-Reg-webfont.woff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/fonts/lato/Lato-Reg-webfont.woff</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/themes/ksboot/stylesheets/ksboot.2.1.1-FR2-M1-build-777.min.css</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.errorFieldModified</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/fonts/icons/krad-icons.woff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/fonts/icons/krad-icons.woff</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/themes/ksboot/stylesheets/ksboot.2.1.1-FR2-M1-build-777.min.css</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.warning</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.information</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.details</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/details_open.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/details_open.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.closeDetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/details_close.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/details_close.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/listener" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">retrieveMessage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                  <stringProp name="Argument.value">message.loading</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/listener</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/loader.gif" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/loader.gif</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/loading.gif" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/loading.gif</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Enrollment Home" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/launch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">start</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">enrollmentHomeView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/launch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=ksFunctionalHomeView&amp;formKey=05746cc9-c7e1-4380-a841-2be0675c49d0&amp;cacheKey=jtors5cvfou5knt7g5rjl</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/images/divider-breadcrumb.png" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/images/divider-breadcrumb.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/themes/ksboot/stylesheets/ksboot.2.1.1-FR2-M1-build-777.min.css</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Calendar Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/calendarSearch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">calendarSearchView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">start</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/calendarSearch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/launch?methodToCall=start&amp;viewId=enrollmentHomeView&amp;formKey=9b793a03-d021-4015-a974-cacd0db4a9c0&amp;cacheKey=y6pqd9v7npic7r9zhfbp7g</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="formKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">formKey</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;formKey&quot; value=&quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sessionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sessionId</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;sessionId&quot; value=&quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/ksboot/stylesheets/calendar.css" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/ksboot/stylesheets/calendar.css</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/calendarSearch?viewId=calendarSearchView&amp;methodToCall=start</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search 2015-2016" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/calendarSearch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="calendarType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">calendarType</stringProp>
                  <stringProp name="Argument.value">AcademicCalendar</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">2015-2016</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageId</stringProp>
                  <stringProp name="Argument.value">ugif6s2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">calendarSearchView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formKey</stringProp>
                  <stringProp name="Argument.value">${formKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requestedFormKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">requestedFormKey</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionId</stringProp>
                  <stringProp name="Argument.value">${sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="flowKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">flowKey</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.applyDirtyCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.applyDirtyCheck</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dirtyForm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dirtyForm</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="renderedInLightBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">renderedInLightBox</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.singlePageView" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.singlePageView</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.disableBrowserCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.disableBrowserCache</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxReturnType</stringProp>
                  <stringProp name="Argument.value">update-page</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="focusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">focusId</stringProp>
                  <stringProp name="Argument.value">urbalfh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jumpToId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jumpToId</stringProp>
                  <stringProp name="Argument.value">urbalfh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/calendarSearch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/calendarSearch?viewId=calendarSearchView&amp;methodToCall=start&amp;formKey=80f35295-3b36-462f-8d58-a7a8e2d726c6&amp;cacheKey=43xjpcpxq5v5uqshx0pdsj</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="formKey2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">formKey2</stringProp>
              <stringProp name="RegexExtractor.regex">&amp;amp;formKey=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="calendar_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">calendar_id</stringProp>
              <stringProp name="RegexExtractor.regex">academicCalendar?id=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701969285">2015-2016 Academic Calendar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Edit Academic Calendar" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/calendarSearch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="calendarType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">calendarType</stringProp>
                  <stringProp name="Argument.value">AcademicCalendar</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">2015-2016</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pageId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageId</stringProp>
                  <stringProp name="Argument.value">ugif6s2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">calendarSearchView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formKey</stringProp>
                  <stringProp name="Argument.value">${formKey2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requestedFormKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">requestedFormKey</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionId</stringProp>
                  <stringProp name="Argument.value">${sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="flowKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">flowKey</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.applyDirtyCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.applyDirtyCheck</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dirtyForm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dirtyForm</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="renderedInLightBox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">renderedInLightBox</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.singlePageView" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.singlePageView</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="view.disableBrowserCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">view.disableBrowserCache</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">edit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionParameters[selectedCollectionPath]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionParameters[selectedCollectionPath]</stringProp>
                  <stringProp name="Argument.value">searchResults</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionParameters[actionEvent]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionParameters[actionEvent]</stringProp>
                  <stringProp name="Argument.value">editAcademicCalendar</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionParameters[selectedCollectionId]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionParameters[selectedCollectionId]</stringProp>
                  <stringProp name="Argument.value">KS-CalendarSearch-AcalResultSection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionParameters[selectedLineIndex]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionParameters[selectedLineIndex]</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="focusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">focusId</stringProp>
                  <stringProp name="Argument.value">FIRST</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jumpToId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jumpToId</stringProp>
                  <stringProp name="Argument.value">TOP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientViewState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientViewState</stringProp>
                  <stringProp name="Argument.value">{&apos;utgk50t&apos;:{&apos;richTableState&apos;:{&apos;iCreate&apos;:1401297981922,&apos;iStart&apos;:0,&apos;iEnd&apos;:1,&apos;iLength&apos;:10,&apos;aaSorting&apos;:[[1,&apos;desc&apos;,1]],&apos;oSearch&apos;:{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true},&apos;aoSearchCols&apos;:[{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true},{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true},{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true},{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true},{&apos;bCaseInsensitive&apos;:true,&apos;sSearch&apos;:&apos;&apos;,&apos;bRegex&apos;:false,&apos;bSmart&apos;:true}],&apos;abVisCols&apos;:[true,true,true,true,true]}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/calendarSearch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/calendarSearch?viewId=calendarSearchView&amp;methodToCall=start&amp;formKey=80f35295-3b36-462f-8d58-a7a8e2d726c6&amp;cacheKey=0qso99t15f7jn6onrrhc6x</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="formKey3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">formKey3</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;formKey&quot; value=&quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="dateEval" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dateEval</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;termWrapperList\[0\].examdates\[0\].endDate&quot; value=&quot;(.*)&quot; size=&quot;9&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">broken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701969285">2015-2016 Academic Calendar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${dateEval} == 12/30/2015" enabled="true">
          <stringProp name="IfController.condition">${dateEval} == 12/30/2015</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Save Academic Calendar" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/academicCalendar" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="defaultTabToShow" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">defaultTabToShow</stringProp>
                    <stringProp name="Argument.value">term</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.name</stringProp>
                    <stringProp name="Argument.value">2015-2016 Academic Calendar</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.startDate</stringProp>
                    <stringProp name="Argument.value">08/23/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.endDate</stringProp>
                    <stringProp name="Argument.value">08/20/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#event-addline&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;holidayCalendarList&apos;].id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;holidayCalendarList&apos;].id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].termType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].startDate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].endDate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].startDate</stringProp>
                    <stringProp name="Argument.value">08/31/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].endDate</stringProp>
                    <stringProp name="Argument.value">12/11/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Fall</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_0_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_0_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].startDate</stringProp>
                    <stringProp name="Argument.value">12/12/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].endDate</stringProp>
                    <stringProp name="Argument.value">12/31/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[0].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[0].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[0].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[0].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015 Sub Term 1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line1&quot;,&quot;term_name_line1&quot;,&quot;term_code_line1&quot;,&quot;parent_term_name_line1&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].startDate</stringProp>
                    <stringProp name="Argument.value">08/29/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line1_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line1_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line1_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line1_control&apos;,&apos;term_start_date_line1&apos;,{&quot;termWrapperList[1].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[1].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[1].startDate&quot;:&quot;termWrapperList[1].startDate&quot;,&quot;termWrapperList[1].termType&quot;:&quot;termWrapperList[1].termType&quot;},{&quot;termWrapperList[1].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[1].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].endDate</stringProp>
                    <stringProp name="Argument.value">10/21/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line1_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line1_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[1].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line1&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line1&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line1&quot;,&quot;term_end_date_line1&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.HalfFall1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line1&quot;,&quot;term_name_line1&quot;,&quot;term_code_line1&quot;,&quot;parent_term_name_line1&quot;,&quot;term_start_date_line1&quot;,&quot;term_end_date_line1&quot;,&quot;termTypeHidden_line1&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_1_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line1_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_1_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line1_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line1_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line1_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line1_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line1&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line1&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015 Sub Term 2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line2&quot;,&quot;term_name_line2&quot;,&quot;term_code_line2&quot;,&quot;parent_term_name_line2&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].startDate</stringProp>
                    <stringProp name="Argument.value">10/22/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line2_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line2_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line2_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line2_control&apos;,&apos;term_start_date_line2&apos;,{&quot;termWrapperList[2].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[2].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[2].startDate&quot;:&quot;termWrapperList[2].startDate&quot;,&quot;termWrapperList[2].termType&quot;:&quot;termWrapperList[2].termType&quot;},{&quot;termWrapperList[2].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[2].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].endDate</stringProp>
                    <stringProp name="Argument.value">12/11/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line2_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line2_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[2].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line2&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line2&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line2&quot;,&quot;term_end_date_line2&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.HalfFall2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line2&quot;,&quot;term_name_line2&quot;,&quot;term_code_line2&quot;,&quot;parent_term_name_line2&quot;,&quot;term_start_date_line2&quot;,&quot;term_end_date_line2&quot;,&quot;termTypeHidden_line2&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_2_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line2_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_2_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line2_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line2_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line2_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line2_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line2&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line2&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].name</stringProp>
                    <stringProp name="Argument.value">Winter 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line3&quot;,&quot;term_name_line3&quot;,&quot;term_code_line3&quot;,&quot;parent_term_name_line3&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].startDate</stringProp>
                    <stringProp name="Argument.value">01/04/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line3_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line3_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line3_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line3_control&apos;,&apos;term_start_date_line3&apos;,{&quot;termWrapperList[3].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[3].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[3].startDate&quot;:&quot;termWrapperList[3].startDate&quot;,&quot;termWrapperList[3].termType&quot;:&quot;termWrapperList[3].termType&quot;},{&quot;termWrapperList[3].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[3].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].endDate</stringProp>
                    <stringProp name="Argument.value">01/22/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line3_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line3_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[3].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line3&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line3&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line3&quot;,&quot;term_end_date_line3&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Winter</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line3&quot;,&quot;term_name_line3&quot;,&quot;term_code_line3&quot;,&quot;parent_term_name_line3&quot;,&quot;term_start_date_line3&quot;,&quot;term_end_date_line3&quot;,&quot;termTypeHidden_line3&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_3_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line3_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_3_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line3_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line3_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line3_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line3_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line3&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line3&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].name</stringProp>
                    <stringProp name="Argument.value">Spring 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line4&quot;,&quot;term_name_line4&quot;,&quot;term_code_line4&quot;,&quot;parent_term_name_line4&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].startDate</stringProp>
                    <stringProp name="Argument.value">01/25/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line4_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line4_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line4_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line4_control&apos;,&apos;term_start_date_line4&apos;,{&quot;termWrapperList[4].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[4].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[4].startDate&quot;:&quot;termWrapperList[4].startDate&quot;,&quot;termWrapperList[4].termType&quot;:&quot;termWrapperList[4].termType&quot;},{&quot;termWrapperList[4].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].endDate</stringProp>
                    <stringProp name="Argument.value">05/10/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line4_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line4_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line4&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line4&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line4&quot;,&quot;term_end_date_line4&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Spring</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line4&quot;,&quot;term_name_line4&quot;,&quot;term_code_line4&quot;,&quot;parent_term_name_line4&quot;,&quot;term_start_date_line4&quot;,&quot;term_end_date_line4&quot;,&quot;termTypeHidden_line4&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_4_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line4_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_4_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line4_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line4_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line4_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line4_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].startDate</stringProp>
                    <stringProp name="Argument.value">05/12/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;exam_date_start_date_line4_line0_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;exam_date_start_date_line4_line0_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].examdates[0].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].endDate</stringProp>
                    <stringProp name="Argument.value">05/19/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;exam_date_end_date_line4_line0_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;exam_date_end_date_line4_line0_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].examdates[0].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[4].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[4].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[4].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[4].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#upj6o5w_line4_line0&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line4&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line4&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].name</stringProp>
                    <stringProp name="Argument.value">Summer I 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line5&quot;,&quot;term_name_line5&quot;,&quot;term_code_line5&quot;,&quot;parent_term_name_line5&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].startDate</stringProp>
                    <stringProp name="Argument.value">05/31/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line5_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line5_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line5_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line5_control&apos;,&apos;term_start_date_line5&apos;,{&quot;termWrapperList[5].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[5].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[5].startDate&quot;:&quot;termWrapperList[5].startDate&quot;,&quot;termWrapperList[5].termType&quot;:&quot;termWrapperList[5].termType&quot;},{&quot;termWrapperList[5].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[5].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].endDate</stringProp>
                    <stringProp name="Argument.value">07/08/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line5_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line5_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[5].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line5&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line5&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line5&quot;,&quot;term_end_date_line5&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Summer1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line5&quot;,&quot;term_name_line5&quot;,&quot;term_code_line5&quot;,&quot;parent_term_name_line5&quot;,&quot;term_start_date_line5&quot;,&quot;term_end_date_line5&quot;,&quot;termTypeHidden_line5&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_5_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line5_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_5_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line5_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line5_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line5_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line5_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line5&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line5&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].name</stringProp>
                    <stringProp name="Argument.value">Summer II 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line6&quot;,&quot;term_name_line6&quot;,&quot;term_code_line6&quot;,&quot;parent_term_name_line6&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].startDate</stringProp>
                    <stringProp name="Argument.value">07/11/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line6_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line6_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line6_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line6_control&apos;,&apos;term_start_date_line6&apos;,{&quot;termWrapperList[6].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[6].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[6].startDate&quot;:&quot;termWrapperList[6].startDate&quot;,&quot;termWrapperList[6].termType&quot;:&quot;termWrapperList[6].termType&quot;},{&quot;termWrapperList[6].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[6].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].endDate</stringProp>
                    <stringProp name="Argument.value">08/19/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line6_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line6_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[6].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line6&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line6&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line6&quot;,&quot;term_end_date_line6&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Summer2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line6&quot;,&quot;term_name_line6&quot;,&quot;term_code_line6&quot;,&quot;parent_term_name_line6&quot;,&quot;term_start_date_line6&quot;,&quot;term_end_date_line6&quot;,&quot;termTypeHidden_line6&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_6_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line6_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_6_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line6_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line6_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line6_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line6_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line6&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line6&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dirtyFields" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dirtyFields</stringProp>
                    <stringProp name="Argument.value">termWrapperList[0].examdates[0].endDate,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageId</stringProp>
                    <stringProp name="Argument.value">academicCalendarEditPage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="viewId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">viewId</stringProp>
                    <stringProp name="Argument.value">academicCalendarFlowView</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="formKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">formKey</stringProp>
                    <stringProp name="Argument.value">${formKey3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedFormKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedFormKey</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flowKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flowKey</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.applyDirtyCheck" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.applyDirtyCheck</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dirtyForm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">dirtyForm</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="renderedInLightBox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">renderedInLightBox</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.singlePageView" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.singlePageView</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.disableBrowserCache" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.disableBrowserCache</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="methodToCall" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">methodToCall</stringProp>
                    <stringProp name="Argument.value">save</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ajaxReturnType</stringProp>
                    <stringProp name="Argument.value">update-page</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ajaxRequest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ajaxRequest</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="focusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">focusId</stringProp>
                    <stringProp name="Argument.value">u1xifjeu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jumpToId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">jumpToId</stringProp>
                    <stringProp name="Argument.value">TOP</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="clientViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">clientViewState</stringProp>
                    <stringProp name="Argument.value">{&apos;uebdi6d&apos;:{&apos;activeTab&apos;:&apos;KS-AcademicTerm-EditSection&apos;},&apos;u4typm5_line0&apos;:{&apos;open&apos;:true}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/kr-krad/academicCalendar</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/academicCalendar?id=0a655d4b-5edc-4d28-academic-calendar&amp;methodToCall=start&amp;viewId=academicCalendarFlowView&amp;formKey=10bfd4f1-20a4-4911-b80a-99472fb1f8fb&amp;cacheKey=s2w3htaxr5je6hzenydrg&amp;pageId=academicCalendarEditPage</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701969285">2015-2016 Academic Calendar</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${dateEval} == 12/31/2015" enabled="true">
          <stringProp name="IfController.condition">${dateEval} == 12/31/2015</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Save Academic Calendar" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/academicCalendar" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="defaultTabToShow" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">defaultTabToShow</stringProp>
                    <stringProp name="Argument.value">term</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.name</stringProp>
                    <stringProp name="Argument.value">2015-2016 Academic Calendar</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.startDate</stringProp>
                    <stringProp name="Argument.value">08/23/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="academicCalendarInfo.endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">academicCalendarInfo.endDate</stringProp>
                    <stringProp name="Argument.value">08/20/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#event-addline&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;holidayCalendarList&apos;].id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;holidayCalendarList&apos;].id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].termType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].startDate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList&apos;].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList&apos;].endDate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].startDate</stringProp>
                    <stringProp name="Argument.value">08/31/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].endDate</stringProp>
                    <stringProp name="Argument.value">12/11/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Fall</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_0_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_0_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].startDate</stringProp>
                    <stringProp name="Argument.value">12/12/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].endDate</stringProp>
                    <stringProp name="Argument.value">12/30/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[0].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[0].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[0].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[0].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[0].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[0].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015 Sub Term 1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line1&quot;,&quot;term_name_line1&quot;,&quot;term_code_line1&quot;,&quot;parent_term_name_line1&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].startDate</stringProp>
                    <stringProp name="Argument.value">08/29/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line1_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line1_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line1_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line1_control&apos;,&apos;term_start_date_line1&apos;,{&quot;termWrapperList[1].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[1].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[1].startDate&quot;:&quot;termWrapperList[1].startDate&quot;,&quot;termWrapperList[1].termType&quot;:&quot;termWrapperList[1].termType&quot;},{&quot;termWrapperList[1].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[1].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].endDate</stringProp>
                    <stringProp name="Argument.value">10/21/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line1_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line1_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[1].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line1&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line1&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line1&quot;,&quot;term_end_date_line1&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[1].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[1].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.HalfFall1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line1&quot;,&quot;term_name_line1&quot;,&quot;term_code_line1&quot;,&quot;parent_term_name_line1&quot;,&quot;term_start_date_line1&quot;,&quot;term_end_date_line1&quot;,&quot;termTypeHidden_line1&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_1_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_1_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line1_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_1_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line1_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line1_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line1_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line1_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line1&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line1&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line1&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].name</stringProp>
                    <stringProp name="Argument.value">Fall 2015 Sub Term 2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line2&quot;,&quot;term_name_line2&quot;,&quot;term_code_line2&quot;,&quot;parent_term_name_line2&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].startDate</stringProp>
                    <stringProp name="Argument.value">10/22/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line2_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line2_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line2_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line2_control&apos;,&apos;term_start_date_line2&apos;,{&quot;termWrapperList[2].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[2].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[2].startDate&quot;:&quot;termWrapperList[2].startDate&quot;,&quot;termWrapperList[2].termType&quot;:&quot;termWrapperList[2].termType&quot;},{&quot;termWrapperList[2].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[2].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].endDate</stringProp>
                    <stringProp name="Argument.value">12/11/2015</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line2_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line2_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[2].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line2&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line2&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line2&quot;,&quot;term_end_date_line2&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[2].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[2].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.HalfFall2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line2&quot;,&quot;term_name_line2&quot;,&quot;term_code_line2&quot;,&quot;parent_term_name_line2&quot;,&quot;term_start_date_line2&quot;,&quot;term_end_date_line2&quot;,&quot;termTypeHidden_line2&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_2_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_2_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line2_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_2_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line2_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line2_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line2_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line2_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line2&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line2&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line2&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].name</stringProp>
                    <stringProp name="Argument.value">Winter 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line3&quot;,&quot;term_name_line3&quot;,&quot;term_code_line3&quot;,&quot;parent_term_name_line3&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].startDate</stringProp>
                    <stringProp name="Argument.value">01/04/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line3_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line3_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line3_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line3_control&apos;,&apos;term_start_date_line3&apos;,{&quot;termWrapperList[3].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[3].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[3].startDate&quot;:&quot;termWrapperList[3].startDate&quot;,&quot;termWrapperList[3].termType&quot;:&quot;termWrapperList[3].termType&quot;},{&quot;termWrapperList[3].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[3].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].endDate</stringProp>
                    <stringProp name="Argument.value">01/22/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line3_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line3_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[3].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line3&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line3&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line3&quot;,&quot;term_end_date_line3&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[3].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[3].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Winter</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line3&quot;,&quot;term_name_line3&quot;,&quot;term_code_line3&quot;,&quot;parent_term_name_line3&quot;,&quot;term_start_date_line3&quot;,&quot;term_end_date_line3&quot;,&quot;termTypeHidden_line3&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_3_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_3_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line3_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_3_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line3_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line3_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line3_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line3_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line3&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line3&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line3&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].name</stringProp>
                    <stringProp name="Argument.value">Spring 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line4&quot;,&quot;term_name_line4&quot;,&quot;term_code_line4&quot;,&quot;parent_term_name_line4&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].startDate</stringProp>
                    <stringProp name="Argument.value">01/25/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line4_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line4_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line4_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line4_control&apos;,&apos;term_start_date_line4&apos;,{&quot;termWrapperList[4].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[4].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[4].startDate&quot;:&quot;termWrapperList[4].startDate&quot;,&quot;termWrapperList[4].termType&quot;:&quot;termWrapperList[4].termType&quot;},{&quot;termWrapperList[4].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].endDate</stringProp>
                    <stringProp name="Argument.value">05/10/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line4_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line4_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line4&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line4&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line4&quot;,&quot;term_end_date_line4&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Spring</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line4&quot;,&quot;term_name_line4&quot;,&quot;term_code_line4&quot;,&quot;parent_term_name_line4&quot;,&quot;term_start_date_line4&quot;,&quot;term_end_date_line4&quot;,&quot;termTypeHidden_line4&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_4_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_4_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line4_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_4_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line4_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line4_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line4_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line4_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].startDate</stringProp>
                    <stringProp name="Argument.value">05/12/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;exam_date_start_date_line4_line0_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;exam_date_start_date_line4_line0_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].examdates[0].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].endDate</stringProp>
                    <stringProp name="Argument.value">05/19/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;exam_date_end_date_line4_line0_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;exam_date_end_date_line4_line0_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[4].examdates[0].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[4].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[4].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].excludeSaturday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].excludeSaturday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_termWrapperList[4].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_termWrapperList[4].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[4].examdates[0].excludeSunday" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[4].examdates[0].excludeSunday</stringProp>
                    <stringProp name="Argument.value">on</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#upj6o5w_line4_line0&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line4&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line4&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line4&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].name</stringProp>
                    <stringProp name="Argument.value">Summer I 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line5&quot;,&quot;term_name_line5&quot;,&quot;term_code_line5&quot;,&quot;parent_term_name_line5&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].startDate</stringProp>
                    <stringProp name="Argument.value">05/31/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line5_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line5_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line5_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line5_control&apos;,&apos;term_start_date_line5&apos;,{&quot;termWrapperList[5].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[5].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[5].startDate&quot;:&quot;termWrapperList[5].startDate&quot;,&quot;termWrapperList[5].termType&quot;:&quot;termWrapperList[5].termType&quot;},{&quot;termWrapperList[5].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[5].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].endDate</stringProp>
                    <stringProp name="Argument.value">07/08/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line5_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line5_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[5].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line5&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line5&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line5&quot;,&quot;term_end_date_line5&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[5].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[5].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Summer1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line5&quot;,&quot;term_name_line5&quot;,&quot;term_code_line5&quot;,&quot;parent_term_name_line5&quot;,&quot;term_start_date_line5&quot;,&quot;term_end_date_line5&quot;,&quot;termTypeHidden_line5&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_5_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_5_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line5_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_5_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line5_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line5_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line5_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line5_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line5&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line5&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line5&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].name</stringProp>
                    <stringProp name="Argument.value">Summer II 2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct25_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line6&quot;,&quot;term_name_line6&quot;,&quot;term_code_line6&quot;,&quot;parent_term_name_line6&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].startDate</stringProp>
                    <stringProp name="Argument.value">07/11/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_start_date_line6_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_start_date_line6_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(&apos;#term_start_date_line6_control&apos;).on(&apos;blur&apos;, function(e) {executeFieldQuery(&apos;term_start_date_line6_control&apos;,&apos;term_start_date_line6&apos;,{&quot;termWrapperList[6].{startDate&quot;:&quot;startDate&quot;,&quot;termWrapperList[6].termType&quot;:&quot;termType}&quot;},{&quot;termWrapperList[6].startDate&quot;:&quot;termWrapperList[6].startDate&quot;,&quot;termWrapperList[6].termType&quot;:&quot;termWrapperList[6].termType&quot;},{&quot;termWrapperList[6].termCode&quot;:&quot;termCode&quot;});}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[6].startDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].endDate</stringProp>
                    <stringProp name="Argument.value">08/19/2016</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createWatermark(&apos;term_end_date_line6_control&apos;, &apos;mm/dd/yyyy &apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createDatePicker(&apos;term_end_date_line6_control&apos;, {showOn:&quot;button&quot;,buttonImageOnly:false,constrainInput:false,disabled:false,buttonImage:&quot;http://env17.ks.kuali.org/themes/kboot/images/cal.gif&quot;});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {
runValidationScript(function(){
jQuery.validator.addMethod(&quot;validChar-termWrapperList[6].endDate0&quot;, function(value, element) {
return this.optional(element) || /(^(0[1-9]|1[012])[\-\/](0[1-9]|[12][0-9]|3[01])[\-\/]((19|2[0-9])?[0-9]{2})$)/.test(value);}, &quot;Must be a date in the following format(s): MM/dd/yy, MM/dd/yyyy, MM-dd-yy, MM-dd-yyyy, yyyy-MM-dd&quot;);});});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">createTooltip(&apos;term_instructional_days_line6&apos;, &apos;Instructional Days include MTWHF&apos;, {position:&quot;top&quot;,align:&quot;left&quot;,alwaysVisible:false,tail:{ align:&apos;left&apos;, hidden: false },themeName:&quot;all-black&quot;,selectable:true,openingSpeed:250,mouseOut:&quot;hide&quot;,divStyle:{ margin:&apos;0px 0px 0px -5px&apos;},tableStyle:{ margin:&apos;0px 0px 5px 0px&apos;},closingDelay:0,distance:&quot;0px&quot;,themePath:&quot;http://env17.ks.kuali.org/plugins/tooltip/jquerybubblepopup-theme/&quot;}, true, true);addAttribute(&apos;term_instructional_days_line6&apos;, &apos;class&apos;, &apos;uif-tooltip&apos;, true);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ud7ct30_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_start_date_line6&quot;,&quot;term_end_date_line6&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="termWrapperList[6].termType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">termWrapperList[6].termType</stringProp>
                    <stringProp name="Argument.value">kuali.atp.type.Summer2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#ur0wi0n_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;term_type_edit_line6&quot;,&quot;term_name_line6&quot;,&quot;term_code_line6&quot;,&quot;parent_term_name_line6&quot;,&quot;term_start_date_line6&quot;,&quot;term_end_date_line6&quot;,&quot;termTypeHidden_line6&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {window.setTimeout(removeNewItemHighlights(),5000); resetDirtyFields(&apos;AcalEdit-DirtyFields&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var condition = function(){return ((coerceValue(&quot;newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos; ) || (coerceValue(&quot;newCollectionLines[&apos;termWrapperList_6_.keyDatesGroupWrappers&apos;].keyDateGroupType&quot;) == &apos;&apos;));};
setupDisabledCheck(&apos;newCollectionLines[\&apos;termWrapperList_6_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line6_add&apos;, &apos;action&apos;, condition,
false);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">setupOnChangeRefresh(&apos;newCollectionLines[\&apos;termWrapperList_6_.keyDatesGroupWrappers\&apos;].keyDateGroupType&apos;, &apos;acal-term-keydatesgroup_line6_add&apos;,&apos;&apos;);</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#key_date_grp_section_line6_add&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line6_add&quot;]});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-keydatesgroup_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;order&quot;:[&quot;key_date_group_type_line6_add&quot;],&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {highlightElements({}, true, &apos;http://env17.ks.kuali.org&apos;);});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">jQuery(document).ready(function(e) {hideAddExamPeriodButton(&apos;acal-term-examdates_line6&apos;, &apos;exam_date_type&apos;, &apos;acal-term-examdates-add&apos;);});jQuery(&apos;#acal-term-examdates-add_line6&apos;).on(&apos;click&apos;, function(e) {writeCurrentPageToSession(this, &apos;last&apos;);}); </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="script" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">script</stringProp>
                    <stringProp name="Argument.value">var dataComponent = jQuery(&apos;#acal-term-examdates_line6&apos;);dataComponent.data(&apos;validation_messages&apos;,{&quot;isTableCollection&quot;:true,&quot;forceShow&quot;:true});</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dirtyFields" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dirtyFields</stringProp>
                    <stringProp name="Argument.value">termWrapperList[0].examdates[0].endDate,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageId</stringProp>
                    <stringProp name="Argument.value">academicCalendarEditPage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="viewId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">viewId</stringProp>
                    <stringProp name="Argument.value">academicCalendarFlowView</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="formKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">formKey</stringProp>
                    <stringProp name="Argument.value">${formKey3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedFormKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedFormKey</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flowKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flowKey</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.applyDirtyCheck" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.applyDirtyCheck</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dirtyForm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">dirtyForm</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="renderedInLightBox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">renderedInLightBox</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.singlePageView" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.singlePageView</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="view.disableBrowserCache" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">view.disableBrowserCache</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="methodToCall" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">methodToCall</stringProp>
                    <stringProp name="Argument.value">save</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ajaxReturnType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ajaxReturnType</stringProp>
                    <stringProp name="Argument.value">update-page</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ajaxRequest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ajaxRequest</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="focusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">focusId</stringProp>
                    <stringProp name="Argument.value">u1xifjeu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jumpToId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">jumpToId</stringProp>
                    <stringProp name="Argument.value">TOP</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="clientViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">clientViewState</stringProp>
                    <stringProp name="Argument.value">{&apos;uebdi6d&apos;:{&apos;activeTab&apos;:&apos;KS-AcademicTerm-EditSection&apos;},&apos;u4typm5_line0&apos;:{&apos;open&apos;:true}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/kr-krad/academicCalendar</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/academicCalendar?id=0a655d4b-5edc-4d28-academic-calendar&amp;methodToCall=start&amp;viewId=academicCalendarFlowView&amp;formKey=10bfd4f1-20a4-4911-b80a-99472fb1f8fb&amp;cacheKey=s2w3htaxr5je6hzenydrg&amp;pageId=academicCalendarEditPage</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701969285">2015-2016 Academic Calendar</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logout" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/j_spring_security_logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/j_spring_security_logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://env17.ks.kuali.org/kr-krad/academicCalendar?id=0a655d4b-5edc-4d28-academic-calendar&amp;methodToCall=start&amp;viewId=academicCalendarFlowView&amp;formKey=10bfd4f1-20a4-4911-b80a-99472fb1f8fb&amp;cacheKey=bdhnhcccs6vaidvumnfpfc&amp;pageId=academicCalendarEditPage</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/kr-krad/launch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="methodToCall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">methodToCall</stringProp>
                  <stringProp name="Argument.value">start</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewId</stringProp>
                  <stringProp name="Argument.value">ksFunctionalHomeView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">env17.ks.kuali.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/kr-krad/launch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
